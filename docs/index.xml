<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kahoy documentation</title><link>https://docs.kahoy.dev/</link><description>Recent content on Kahoy documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.kahoy.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://docs.kahoy.dev/introduction/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/introduction/getting-started/</guid><description>Prerequisites A Kubernetes cluster and access to it. Kahoy and Kubectl installed. A folder with Kubernetes manifests. Install Kahoy Get the latest binary release from Github or refer to the Installing Kahoy section.
Using Kahoy We&amp;rsquo;re going to go through a brief example of how a normal interaction deploying manifests with Kahoy would look like.
We&amp;rsquo;re given the following scenario:
Kahoy is configured with the default Kubernetes provider.</description></item><item><title>Alternatives and scope</title><link>https://docs.kahoy.dev/introduction/alternatives-and-scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/introduction/alternatives-and-scope/</guid><description>Alternatives Kahoy was born because the available tools for deployment were too complex for our usecase, more on this under History of the project section. Kubernetes is a complex system by itself, adding more complexity in the cases where is not needed, is not a good solution.
Helm: Tries solving other kinds of problems, has templating (v2 tiller), the concept of releases, used to deploy single apps&amp;hellip; However, you can use helm for templating and kahoy to deploy the generated manifests.</description></item><item><title>Installing Kahoy</title><link>https://docs.kahoy.dev/introduction/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/introduction/install/</guid><description>Releases Kahoy is compiled for all common platforms and uploaded to Github releases.
To get the latest release, grab it here.
Docker In case you want to use Docker, you have a ready to be used image on docker hub
docker pull slok/kahoy Note: This image has Kahoy and other dependencies like kubectl and git.
Build from source You can build binaries from source easily.
git clone git@github.com:slok/kahoy.git cd ./kahoy make build</description></item><item><title>Concepts</title><link>https://docs.kahoy.dev/topics/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/concepts/</guid><description>Resource Group State Provider Kahoy Plan Resource When we refer to a Resource we mean any Kubernetes resource.
Kahoy internally identifies resources by type, namespace, and name. Thanks to this the user can arrange any number of kubernetes resources in a single yaml or split them in multiple yamls. Both scenarios will be considered equal and it will not affect any of the operations run by Kahoy.</description></item><item><title>How does it work</title><link>https://docs.kahoy.dev/topics/how-does-it-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/how-does-it-work/</guid><description>A pipeline is probably the best way to illustrate all the things that are happening inside Kahoy. This pipeline consists of 5 major steps:
Stage 1: Load kubernetes manifests. Load old state Resources and Groups. Load new state Resources and Groups. Optional: There are filters available to exclude/include certain types of manifests. Stage 2: Plan by comparing old and new states. Get existing resources and produce the section Apply in the Plan.</description></item><item><title>Execution modes</title><link>https://docs.kahoy.dev/topics/modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/modes/</guid><description>Dry-run Will plan and list the resources that need to exist and be deleted from the cluster.
Enable this mode using --dry-run flag.
This operation doesn&amp;rsquo;t require to use the Kubernetes cluster unless Kubernetes provider is used. Diff Will get the diff against the current cluster manifests. Requires to connect to the Kubernetes cluster.
Enable this mode using --diff flag.
Default (no options) Will apply the resources that need to exist, and remove the ones that need to be deleted.</description></item><item><title>Kubernetes</title><link>https://docs.kahoy.dev/topics/provider/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/provider/kubernetes/</guid><description>Given an storage ID and a namespace, at the end of the execution it will store the executed state (applied and deleted resources).
The ID is important because you can have different states for each Kahoy execution flows on the same cluster.
Note: The state is stored with a Secret per existing resource. Be aware of object count quota
With this state storage, it will load the old manifest state from Kubernetes and new manifest state from an fs path.</description></item><item><title>Git</title><link>https://docs.kahoy.dev/topics/provider/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/provider/git/</guid><description>This provider understands git and can read states from a git repository, these 2 states are based on 2 git revisions.
Using before-commit will make a plan based on the manifests of HEAD (new state) and the commit provided (old state). Normally used when executed from master/main branch.
Instead of providing the before-commit, by default will get the base parent of the current branch HEAD (new state) against the default branch (old state), normally master/main).</description></item><item><title>Paths</title><link>https://docs.kahoy.dev/topics/provider/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/provider/paths/</guid><description>Given 2 manifest file system paths, plans what needs to be applied against a cluster, and what needs to be deleted.
This one is the most generic one and can be used when you want to manage almost everything, e.g previous Kahoy execution, prepare using bash scripts, kustomize, secrets&amp;hellip;
Example of usage:
kahoy apply \ --provider &amp;#34;paths&amp;#34; \ --fs-old-manifests-path &amp;#34;./old-manifests&amp;#34; \ --fs-new-manifests-path &amp;#34;./manifests&amp;#34;</description></item><item><title>Sync types</title><link>https://docs.kahoy.dev/topics/sync-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/sync-types/</guid><description>Kahoy can sync Kubernetes resources in two different ways, we will call then partial and full. Using both will leverage the full power of kahoy and make the sync more reliable.
Partial A partial sync will sync only the resources that have changes.
Kahoy will compare old and new state resources, get the resources that changed (modifications and deletions) and filter the rest.
This makes the perfect way of execution on pull requests because:</description></item><item><title>Batch and priorities</title><link>https://docs.kahoy.dev/topics/batch-priorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/batch-priorities/</guid><description>As we have seen in the concepts section, Kahoy has the concept of groups. Kahoy can use these to give special options to all the resources in group.
Priority If priority is configured for a group, depending on the priority it will be batched and applied differently to the default one.
The priority is given with an integer that represents the order of the batches, by default is 1000. This means that a group with a priority of 200, will be batched and applied after a group with priority of 50 and before the default batch 1000.</description></item><item><title>Filtering resources</title><link>https://docs.kahoy.dev/topics/filtering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/filtering/</guid><description>File system level Resource level Kubernetes level</description></item><item><title>Report</title><link>https://docs.kahoy.dev/topics/report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/report/</guid><description>Kahoy can give a report at the end of the execution with the information of the resources that have been deleted and applied.
This is very flexible and powerful because it gives the ability to plug new apps after Kahoy execution e.g:
Push notifications Wait for resources be available: Example. Push metrics. Execute sanity checks &amp;hellip; This approach follows unix philosophy of having multiple tools, each one doing one thing well and combining them to solve an specific problem (e.</description></item><item><title>Garbage collection</title><link>https://docs.kahoy.dev/topics/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/garbage-collection/</guid><description>TODO</description></item><item><title>Configuration file</title><link>https://docs.kahoy.dev/topics/configuration-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/configuration-file/</guid><description>Most of kahoy options are based on flags (and env vars), however it also has some options that are based in a configuration file. The file options.
By default it will look for ./kahoy.yml, yet you can configure using --config-file flag.
Lets see what are the available options based on an example:
# Version of the configuration format.version:v1# File system configuration.fs:# Exclude regex for file paths (same as `--fs-exclude`, can be used both).</description></item><item><title>Create namespace</title><link>https://docs.kahoy.dev/topics/create-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/create-namespace/</guid><description>When we try dry-run style operations against the apiserver (like apply or diff) on namespaced resources, Kubernetes expets the namespaces of these resource to exist. However, on some of these executions the namespace has not been created yet, making the execution fail with a namespace not found error.
Using --create-namespace flag in default or diff modes, Kahoy will ensure the namespace exists before trying to apply these resources.
When used in diff mode, a namespace will be created, so be aware of this side effect.</description></item><item><title>Contributing</title><link>https://docs.kahoy.dev/community/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/community/contributing/</guid><description>The contributing information is in Github, check CONTRIBUTING.md file</description></item><item><title>History of the project</title><link>https://docs.kahoy.dev/community/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/community/history/</guid><description>TODO</description></item><item><title>Generic app based deployments</title><link>https://docs.kahoy.dev/tutorials/generic-apps-deployments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/generic-apps-deployments/</guid><description>TODO</description></item><item><title>Gitops production ready flow</title><link>https://docs.kahoy.dev/tutorials/gitops-production-ready-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/gitops-production-ready-flow/</guid><description>TODO</description></item><item><title>Multiple env deployments</title><link>https://docs.kahoy.dev/tutorials/multicluster-deployments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/multicluster-deployments/</guid><description>TODO</description></item><item><title>Scaling Kahoy to 20k apps</title><link>https://docs.kahoy.dev/tutorials/scaling-20k-apps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/scaling-20k-apps/</guid><description>TODO</description></item><item><title>Using Git provider</title><link>https://docs.kahoy.dev/tutorials/using-git-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/using-git-provider/</guid><description>TODO</description></item><item><title>Waiting deployment to be ready</title><link>https://docs.kahoy.dev/tutorials/waiting-deployments-finish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/tutorials/waiting-deployments-finish/</guid><description>TODO</description></item></channel></rss>