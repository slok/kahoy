<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Topics on Kahoy documentation</title><link>https://docs.kahoy.dev/topics/</link><description>Recent content in Topics on Kahoy documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.kahoy.dev/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>Concepts</title><link>https://docs.kahoy.dev/topics/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/concepts/</guid><description>Resource Group State Provider Kahoy Plan Resource When we refer to a Resource we mean any Kubernetes resource.
Kahoy internally identifies resources by type, namespace, and name. Thanks to this the user can arrange any number of kubernetes resources in a single yaml or split them in multiple yamls. Both scenarios will be considered equal and it will not affect any of the operations run by Kahoy.</description></item><item><title>How does it work</title><link>https://docs.kahoy.dev/topics/how-does-it-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/how-does-it-work/</guid><description>A pipeline is probably the best way to illustrate all the things that are happening inside Kahoy. This pipeline consists of 5 major steps:
Stage 1: Load kubernetes manifests. Load old state Resources and Groups. Load new state Resources and Groups. Optional: There are filters available to exclude/include certain types of manifests. Stage 2: Plan by comparing old and new states. Get existing resources and produce the section Apply in the Plan.</description></item><item><title>Execution modes</title><link>https://docs.kahoy.dev/topics/modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/modes/</guid><description>Dry-run Will plan and list the resources that need to exist and be deleted from the cluster.
Enable this mode using --dry-run flag.
This operation doesn&amp;rsquo;t require to use the Kubernetes cluster unless Kubernetes provider is used. Diff Will get the diff against the current cluster manifests. Requires to connect to the Kubernetes cluster.
Enable this mode using --diff flag.
Default (no options) Will apply the resources that need to exist, and remove the ones that need to be deleted.</description></item><item><title>Sync types</title><link>https://docs.kahoy.dev/topics/sync-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/sync-types/</guid><description>TODO
Partial TODO
Full TODO</description></item><item><title>Batch and priorities</title><link>https://docs.kahoy.dev/topics/batch-priorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/batch-priorities/</guid><description>As we have seen in the concepts section, Kahoy has the concept of groups. Kahoy can use these to give special options to all the resources in group.
Priority If priority is configured for a group, depending on the priority it will be batched and applied differently to the default one.
The priority is given with an integer that represents the order of the batches, by default is 1000. This means that a group with a priority of 200, will be batched and applied after a group with priority of 50 and before the default batch 1000.</description></item><item><title>Filtering resources</title><link>https://docs.kahoy.dev/topics/filtering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/filtering/</guid><description>TODO</description></item><item><title>Report</title><link>https://docs.kahoy.dev/topics/report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/report/</guid><description>Kahoy can give a report at the end of the execution with the information of the resources that have been deleted and applied.
This is very flexible and powerful because it gives the ability to plug new apps after Kahoy execution e.g:
Push notifications Wait for resources be available: Example. Push metrics. Execute sanity checks &amp;hellip; This approach follows unix philosophy of having multiple tools, each one doing one thing well and combining them to solve an specific problem (e.</description></item><item><title>Garbage collection</title><link>https://docs.kahoy.dev/topics/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/garbage-collection/</guid><description>TODO</description></item><item><title>Configuration file</title><link>https://docs.kahoy.dev/topics/configuration-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/configuration-file/</guid><description>Most of kahoy options are based on flags (and env vars), however it also has some options that are based in a configuration file. The file options.
By default it will look for ./kahoy.yml, yet you can configure using --config-file flag.
Lets see what are the available options based on an example:
# Version of the configuration format.version:v1# File system configuration.fs:# Exclude regex for file paths (same as `--fs-exclude`, can be used both).</description></item><item><title>Create namespace</title><link>https://docs.kahoy.dev/topics/create-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kahoy.dev/topics/create-namespace/</guid><description>When we try dry-run style operations against the apiserver (like apply or diff) on namespaced resources, Kubernetes expets the namespaces of these resource to exist. However, on some of these executions the namespace has not been created yet, making the execution fail with a namespace not found error.
Using --create-namespace flag in default or diff modes, Kahoy will ensure the namespace exists before trying to apply these resources.
When used in diff mode, a namespace will be created, so be aware of this side effect.</description></item></channel></rss>