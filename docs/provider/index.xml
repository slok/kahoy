<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Provider on Kahoy documentation</title>
    <link>https://docs.kahoy.dev/provider/</link>
    <description>Recent content in Provider on Kahoy documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.kahoy.dev/provider/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git provider</title>
      <link>https://docs.kahoy.dev/provider/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kahoy.dev/provider/git/</guid>
      <description>This provider understands git and can read states from a git repository, these 2 states are based on 2 git revisions.
Using before-commit will make a plan based on the manifests of HEAD (new state) and the commit provided (old state). Normally used when executed from master/main branch.
Instead of providing the before-commit, by default will get the base parent of the current branch HEAD (new state) against the default branch (old state), normally master/main).</description>
    </item>
    
    <item>
      <title>Kubernetes provider</title>
      <link>https://docs.kahoy.dev/provider/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kahoy.dev/provider/kubernetes/</guid>
      <description>Given an storage ID and a namespace, at the end of the execution it will store the executed state (applied and deleted resources).
The ID is important because you can have different states for each Kahoy execution flows on the same cluster.
 Note: The state is stored with a Secret per existing resource. Be aware of object count quota
 With this state storage, it will load the old manifest state from Kubernetes and new manifest state from an fs path.</description>
    </item>
    
    <item>
      <title>Paths provider</title>
      <link>https://docs.kahoy.dev/provider/paths/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kahoy.dev/provider/paths/</guid>
      <description>Given 2 manifest file system paths, plans what needs to be applied against a cluster, and what needs to be deleted.
This one is the most generic one and can be used when you want to manage almost everything, e.g previous Kahoy execution, prepare using bash scripts, kustomize, secrets&amp;hellip;
Example of usage:
kahoy apply \  --provider &amp;#34;paths&amp;#34; \  --fs-old-manifests-path &amp;#34;./old-manifests&amp;#34; \  --fs-new-manifests-path &amp;#34;./manifests&amp;#34; </description>
    </item>
    
  </channel>
</rss>
