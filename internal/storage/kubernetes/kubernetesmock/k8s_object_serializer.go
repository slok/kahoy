// Code generated by mockery v2.1.0. DO NOT EDIT.

package kubernetesmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/slok/kahoy/internal/model"
)

// K8sObjectSerializer is an autogenerated mock type for the K8sObjectSerializer type
type K8sObjectSerializer struct {
	mock.Mock
}

// DecodeObjects provides a mock function with given fields: ctx, raw
func (_m *K8sObjectSerializer) DecodeObjects(ctx context.Context, raw []byte) ([]model.K8sObject, error) {
	ret := _m.Called(ctx, raw)

	var r0 []model.K8sObject
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []model.K8sObject); ok {
		r0 = rf(ctx, raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.K8sObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeObjects provides a mock function with given fields: ctx, objs
func (_m *K8sObjectSerializer) EncodeObjects(ctx context.Context, objs []model.K8sObject) ([]byte, error) {
	ret := _m.Called(ctx, objs)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, []model.K8sObject) []byte); ok {
		r0 = rf(ctx, objs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []model.K8sObject) error); ok {
		r1 = rf(ctx, objs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
