// Code generated by mockery v2.3.0. DO NOT EDIT.

package storagemock

import (
	context "context"

	model "github.com/slok/kahoy/internal/model"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/slok/kahoy/internal/storage"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// GetGroup provides a mock function with given fields: ctx, id
func (_m *GroupRepository) GetGroup(ctx context.Context, id string) (*model.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Group); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, opts
func (_m *GroupRepository) ListGroups(ctx context.Context, opts storage.GroupListOpts) (*storage.GroupList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *storage.GroupList
	if rf, ok := ret.Get(0).(func(context.Context, storage.GroupListOpts) *storage.GroupList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.GroupList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.GroupListOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
