// Code generated by mockery (devel). DO NOT EDIT.

package kubectlmock

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FSManager is an autogenerated mock type for the FSManager type
type FSManager struct {
	mock.Mock
}

// RemoveAll provides a mock function with given fields: path
func (_m *FSManager) RemoveAll(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TempDir provides a mock function with given fields: dir, pattern
func (_m *FSManager) TempDir(dir string, pattern string) (string, error) {
	ret := _m.Called(dir, pattern)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dir, pattern)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dir, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: filename, data, perm
func (_m *FSManager) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(filename, data, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
